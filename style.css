/* General styling for the webpage. This removes default borders and paddings, also adding a specific font and changing the box sizing (border box defines the size of teh boxes by the width value) */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Open Sans", sans-serif;
}

/* Here I started styling the navbar by adding general rules, like background and position */
.navbar {
  background: #131313;
  height: 80px;

  /* This makes the contents inside the "navbar" box displayed side by side */
  display: flex;

  /* The two following declarations make the content stay at the center. This will help separating them each in their sides on the navbar.
    "justify-content" is responsible for describing how the items of a box are distributed. */
  justify-content: center;
  align-items: center;
  font-size: 1rem;

  /* This makes the navbar stay at the top even after scrolling downwards */
  position: sticky;
  top: 0;
  z-index: 999;
}

/* Here I positioned the navbar elements */
.navbar-container {
  display: flex;
  justify-content: space-between;
  height: 80px;
  width: 100%;
  max-width: 1300px;
  margin-right: auto;
  margin-left: auto;
  padding-right: 50px;
  padding-left: 50px;
}

/* Here I colored and position the logo */
#navbar-logo {
  color: #fff;
  display: flex;

  /* "align items" helps us positioning the element inside itself, or in its own box. */
  align-items: center;
  cursor: pointer;
  text-decoration: none;
  font-size: 2rem;
}

/* With this ruleset I made the navbar items stay side by side and aligned with the center.*/
.navbar-menu {
  display: flex;
  align-items: center;
  list-style: none;
  text-align: center;
}

/* I had to set the items height to be the same as the navbar itself. If it wasn't for it, then they wouldn't fill their entire box later on with "height: 100%" */
.navbar-item {
  height: 80px;
}

/* This ruleset targets specifically the links of the LI, the words themselves. */
.navbar-links {
  color: #fff;

  /* This makes the links stay in the same axis as the button */
  display: flex;
  align-items: center;
  height: 100%;
  justify-content: center;
  text-decoration: none;

  /* This is what keeps them separated */
  padding: 0 1rem;
  transition: all 0.3s ease-in-out;
}

/* Here I positioned the button */
.navbar-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 1rem;
  width: 100%;
}

/* This is where I styled the sign in button itself */
.button {
  display: flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  color: #000;
  background: #fff;
  padding: 10px 20px;
  height: 100%;
  width: 100%;
  border: none;
  outline: none;
  border-radius: 4px;

  /* We set the speed and behavior of the transition at the element's class */
  transition: all 0.3s ease-in-out;
}

/* This is what makes the button change colors whenever we hover it (put our cursor on it) */
.button:hover {
  background: #782605;
  color: #fff;
}

.navbar-links:hover {
  color: #782605;
  transform: scale(1.08);
}

/* Here goes the responsive styling. This media query is basically saying that, whenever the screen has a width of 960px, what's inside of it will override any other styling */
@media screen and (max-width: 960px) {
  .navbar-container {
    display: flex;
    justify-content: space-between;
    height: 80px;
    width: 100%;
    z-index: 1;
    max-width: 1300px;
    padding: 0;
  }

  #navbar-logo {
    padding-left: 25px;
  }

  /* This ruleset prepares the navbar to be responsive in some ways */
  .navbar-menu {
    /* Here, with these two declarations, we made the menu become a column and not a row anymore */
    display: grid;
    grid-template-columns: auto;
    margin: 0;
    width: 100%;

    /* These two declarations make the menu go up and out of the screen. "position: absolute" makes an elemente move freely in relation to its parent container */
    position: absolute;
    top: -1000px;
    opacity: 1;
    transition: all 0.5s ease-in-out;
    height: 50vh;
    z-index: -1;
  }

  /* This positions and styles the navbar on mobile */
  .navbar-menu:active {
    background: #131313;
    top: 100%;
    opacity: 1;
    transition: all 0.5s ease;
    z-index: 99;
    height: 50vh;
    font-size: 1.6rem;
  }

  /* This creates the hamburguer menu itself, setting the size and color of the bars */
  .navbar-toggle .bar {
    width: 25px;
    height: 3px;
    margin: 5px auto;
    transition: all 0.3s ease-in-out;
    background: #fff;
  }

  .navbar-item {
    width: 100%;
  }

  .navbar-links {
    text-align: center;
    padding: 2rem;
    width: 100%;
    display: table;
  }

  .navbar-btn {
    padding-bottom: 2rem;
  }

  .button {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 80%;
    height: 80px;
    margin: 0;
  }

  /* This makes the bar visible */
  .navbar-toggle .bar {
    display: block;
    cursor: pointer;
  }

  /* This positions the ham menu */
  #mobile-menu {
    position: absolute;
    top: 20%;
    right: 5%;
    transform: translate(5%, 20%);
  }

  /* This is the animation part when we click the ham menu. "nth-child" targets the direct children of the elemen before colon, and within parenthesis is the index of each child */
  #mobile-menu.is-active .bar:nth-child(2) {
    opacity: 0;
  }

  /* The following two rulesets rotates the first and third bars to create the animation */
  #mobile-menu.is-active .bar:nth-child(1) {
    transform: translateY(8px) rotate(45deg);
  }

  #mobile-menu.is-active .bar:nth-child(3) {
    transform: translateY(-8px) rotate(-45deg);
  }
}
